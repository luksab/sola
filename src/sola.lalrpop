use std::str::FromStr;
use crate::base_ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);
// grammar;


Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Box<Expression<'input>> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expression::Op(<>)),
    NextTier
};

// Main expression grammar

pub Program: Program<'input> = {
    (<TopLevel>)* => Program{things: <>}
}

pub TopLevel: TopLevel<'input> = {
    // <Declaration> => TopLevel::Declaration(<>),
    <Function> => TopLevel::Function(<>),
    Comment => TopLevel::Comment(<>),
    // <Expression> => TopLevel::Expression(<>),
    // <Statement> => TopLevel::Statement(<>),
};

pub Comment: Comment<'input> = {
    r"//[^\n\r]*" => Comment::new(<>),
};

// Function grammar

Function: Function<'input> = {
    <definition: FunctionDefinition> <body:Expression> => Function {
        definition: definition,
        body: Some(body),
    },
};

FunctionDefinition: FunctionDefinition<'input> = {
    "fn " <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "(" <params:(Parameter)*> ")" "->" <return_type: Type> => FunctionDefinition {
        name: name,
        params: params,
        return_type: Some(return_type),
    },
    "fn " <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "(" <params:(Parameter)*> ")" => FunctionDefinition {
        name: name,
        params: params,
        return_type: None,
    }
};

Parameter: Parameter<'input> = {
    <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*">":" <tipe: Type> => Parameter {
        name: name,
        tipe: tipe,
    }
};

Type: Type<'input> = {
    "i32" => Type::I32,
};

// Expression grammar
Statement: Statement<'input> = {
    "let " <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*">":" <t:Type> "=" <e:Expression> ";" => 
        Statement::Let(Let{name, tipe: t, value: e}),
    "return" <e:Expression> ";" => Statement::Return(e),
    // "if" <e:Expression> "{" <b:Block> "}" => {
    //     Statement::Expression(Box::new(Expression::If(If {
    //         condition: e, body: Box::new(Expression::Block(b)), else_body: None
    //         })))
    // },
    // "if" <e:Expression> "{" <b:Block> "}" "else" "{" <be:Block> "}" => {
    //     Statement::Expression(Box::new(Expression::If(If {
    //         condition: e, body: Box::new(Expression::Block(b)), else_body: Some(Box::new(Expression::Block(be)))
    //     })))
    // },
    <e:Expression> ";" => Statement::Expression(e),
    Comment => Statement::Comment(<>),
    ! => { errors.push(<>); Statement::Error },
};

Expr: Box<Expression<'input>> = {
    Num => Box::new(Expression::Number(<>)),
    <s:r#""[^"]*""#> => Box::new(Expression::String(ASTString{value: <>})),
    "(" <Expression> ")",
    // "{" <s:(Statement)*> "}" => Box::new(Expression::Block(s)),
    // "{" <b:Block> "}" => Box::new(Expression::Block(b)),
    "if" <e:Expression> <b:Block> => {
        Box::new(Expression::If(If {
            condition: e, body: Box::new(Expression::Block(b)), else_body: None
            }))
    },
    "if" <e:Expression> <b:Block> "else" <be:Block> => {
        Box::new(Expression::If(If {
            condition: e, body: Box::new(Expression::Block(b)), else_body: Some(Box::new(Expression::Block(be)))
        }))
    },
    <FunctionCall> => Box::new(Expression::FunctionCall(<>)),
    r"[a-zA-Z\{Emoji}][\w\{Emoji}]*" => {
        Box::new(Expression::Variable(Variable{name: <>}))
    },
    // <expr: Expression> <comment: Comment> => Box::new(Expression::ExpressionComment(<expr>, <comment>)),
    // ! => { errors.push(<>); Box::new(Expression::Error) },
};

Block: Block<'input> = {
    "{" <s:(Statement)*> "}" => Block {
        statements: s,
        return_value: None,
    },
    "{" <s:(Statement)*> <e:Expression> "}" => Block {
        statements: s,
        return_value: Some(e),
    }
};

BlockExpr: Box<Expression<'input>> = {
    <b:Block> => Box::new(Expression::Block(b)),
};

FunctionCall: FunctionCall<'input> = {
    <name:r"[a-zA-Z\{Emoji}][\w\{Emoji}]*"> "(" <args:Comma<Expression>> ")" => FunctionCall {
        name: name,
        args: args,
    }
};


// --------------- math -------------------------------------------------------

Expression: Box<Expression<'input>> = {
    <b:Block> => Box::new(Expression::Block(b)),
    <e:Express> => e,
};
Express = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Comparison>;
Comparison = Tier<ComparisonOp, Expr>;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

ComparisonOp: Opcode = {
    "==" => Opcode::Eq,
    "!=" => Opcode::Ne,
    "<" => Opcode::Lt,
    "<=" => Opcode::Le,
    ">" => Opcode::Gt,
    ">=" => Opcode::Ge,
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};